// jest.setTimeout(600000);
// describe("Test fulfill user", () => {
//   it("should return 200 and the store data ok", async () => {
//     await request.post("/").send(testAccessData);
//     const userResponse = await request.post("/users").send(testUserOK);
//     const mongoId = userResponse.body.data.user.uid;
//     const response = await request.put(`/users/${mongoId}/fulfill`);
//     expect(response.status).toBe(200);
//   });
// });

// jest.setTimeout(600000);
// describe("Test fulfill user", () => {
//   it("should return 404", async () => {
//     await request.post("/accessData").send(testAccessData);
//     const response = await request.put(`/users/${genericMongoId}/fulfill`);
//     expect(response.status).toBe(404);
//   });
// });

// // jest.setTimeout(600000);
// // describe("Test fulfill user", () => {
// //   it("should return 200 and the store data, empty webhooks", async () => {
// //     const tiendanube = new Tiendanube();
// //     await tiendanube.deleteWebhooks(testStore);
// //     await request.post("/accessData").send(testAccessData);
// //     const user = await request.post("/users").send(testUserOK);
// //     const mongoId = user.body.data.user.uid;
// //     const response = await request.put(`/users/${mongoId}/fulfill`);
// //     expect(response.status).toBe(200);
// //   });
// // });

// describe("Test post user", () => {
//   it("should return a 201 status code", async () => {
//     const response = await request.post("/users").send(testUserOK);
//     expect(response.status).toBe(201);
//   });
// });

// describe("Test post user", () => {
//   it("should return a 400 status code, empty mandatory field ", async () => {
//     const response = await request.post("/users").send(testUserEmptyMail);
//     expect(response.status).toBe(400);
//   });
// });

// describe("Test post user", () => {
//   it("should return a 400 status code, invalid mail ", async () => {
//     const response = await request.post("/users").send(testUserInvalidMail);
//     expect(response.status).toBe(400);
//   });
// });

// describe("Test get user by id", () => {
//   it("should return a 200 status code", async () => {
//     await request.post("/users").send(testUserOK);
//     const response = await request.get(`/users/${testUserOK.userId}`);
//     expect(response.status).toBe(200);
//   });
// });

// describe("Test get user", () => {
//   it("should return a 404 status code, id not found", async () => {
//     const response = await request.get(`/users/${genericUserId}`);
//     expect(response.status).toBe(404);
//   });
// });

// describe("Test get all users", () => {
//   it("should return a 200 status code", async () => {
//     const response = await request.get("/users");
//     expect(response.status).toBe(200);
//   });
// });

// describe("Test delete user", () => {
//   it("should return a 200 status code ", async () => {
//     await request.post("/users").send(testUserOK);
//     const response = await request.delete(`/users/${testUserOK.userId}`);
//     expect(response.status).toBe(200);
//   });
// });

// describe("Test delete user", () => {
//   it("should return a 404 status code ", async () => {
//     const response = await request.delete(`/users/${genericUserId}`);
//     expect(response.status).toBe(404);
//   });
// });

// describe("Test update user", () => {
//   it("should return a 200 status code", async () => {
//     await request.post("/users").send(testUserOK);
//     const updatedName = "Updated Name";
//     testUserOK.name = updatedName;
//     const response = await request
//       .put(`/users/${testUserOK.userId}`)
//       .send(testUserOK);
//     expect(response.status).toBe(200);
//     expect(response.body.data.user.name).toBe(updatedName);
//   });
// });

// describe("Test update user", () => {
//   it("should return a 400 status code, id not found", async () => {
//     const response = await request
//       .put(`/users/${genericUserId}`)
//       .send(testUserOK);
//     expect(response.status).toBe(404);
//   });
// });

// describe("Test update user", () => {
//   it("should return a 400 status code, empty required field", async () => {
//     await request.post("/users").send(testUserOK);
//     const updatedMail = null;
//     testUserOK.email = updatedMail;
//     const response = await request
//       .put(`/users/${testUserOK.userId}`)
//       .send(testUserOK);
//     expect(response.status).toBe(400);
//   });
// });
